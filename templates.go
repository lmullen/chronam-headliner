package headliner

import (
	"bytes"
	_ "embed"
	"log/slog"
	"text/template"
)

//go:embed ai-prompt-user.txt
var promptUser string

//go:embed ai-prompt-system.txt
var promptSystem string

//go:embed ai-response-schema.json
var promptSchema string

type PromptMaker func(string) (string, error)

// Make a function that will take the OCR text in and return it
// in the prompt as generated by the template. The template uses the
// JSON schema read from the file. The system prompt will just be
// available as a variable.
func MakePromptTemplate() (PromptMaker, error) {

	slog.Debug("parsing templates")
	tmpl, err := template.New("prompt").Parse(promptUser)
	if err != nil {
		return nil, err
	}

	makePrompt := func(ocr string) (string, error) {
		data := struct {
			OCR    string
			Schema string
		}{
			OCR:    ocr,
			Schema: promptSchema,
		}
		var buf bytes.Buffer
		err := tmpl.Execute(&buf, data)
		if err != nil {
			return "", err
		}
		return buf.String(), err
	}

	return makePrompt, err
}
